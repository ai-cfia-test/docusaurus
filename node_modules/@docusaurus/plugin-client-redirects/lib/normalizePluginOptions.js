"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPluginOptions = void 0;
const Joi = __importStar(require("@hapi/joi"));
const redirectValidation_1 = require("./redirectValidation");
exports.DefaultPluginOptions = {
    fromExtensions: [],
    toExtensions: [],
    redirects: [],
};
const RedirectPluginOptionValidation = Joi.object({
    to: redirectValidation_1.PathnameValidator.required(),
    from: Joi.alternatives().try(redirectValidation_1.PathnameValidator.required(), Joi.array().items(redirectValidation_1.PathnameValidator.required())),
});
const isString = Joi.string().required().not(null);
const UserOptionsSchema = Joi.object({
    fromExtensions: Joi.array().items(isString),
    toExtensions: Joi.array().items(isString),
    redirects: Joi.array().items(RedirectPluginOptionValidation),
    createRedirects: Joi.function().arity(1),
});
function validateUserOptions(userOptions) {
    const { error } = UserOptionsSchema.validate(userOptions, {
        abortEarly: true,
        allowUnknown: false,
    });
    if (error) {
        throw new Error(`Invalid @docusaurus/plugin-client-redirects options: ${error.message}
  ${JSON.stringify(userOptions, null, 2)}`);
    }
}
function normalizePluginOptions(userPluginOptions = {}) {
    validateUserOptions(userPluginOptions);
    return Object.assign(Object.assign({}, exports.DefaultPluginOptions), userPluginOptions);
}
exports.default = normalizePluginOptions;
