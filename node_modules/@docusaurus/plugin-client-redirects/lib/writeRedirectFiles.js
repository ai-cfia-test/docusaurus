"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeRedirectFile = exports.toRedirectFilesMetadata = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const lodash_1 = require("lodash");
const createRedirectPageContent_1 = __importDefault(require("./createRedirectPageContent"));
const utils_1 = require("@docusaurus/utils");
function toRedirectFilesMetadata(redirects, pluginContext) {
    // Perf: avoid rendering the template twice with the exact same "props"
    // We might create multiple redirect pages for the same destination url
    // note: the first fn arg is the cache key!
    const createPageContentMemoized = lodash_1.memoize((toUrl) => {
        return createRedirectPageContent_1.default({ toUrl });
    });
    const createFileMetadata = (redirect) => {
        const fileAbsolutePath = path_1.default.join(pluginContext.outDir, utils_1.getFilePathForRoutePath(redirect.from));
        const toUrl = utils_1.addTrailingSlash(`${utils_1.removeTrailingSlash(pluginContext.baseUrl)}${path_1.default.join(redirect.to)}`);
        const fileContent = createPageContentMemoized(toUrl);
        return Object.assign(Object.assign({}, redirect), { fileAbsolutePath,
            fileContent });
    };
    return redirects.map(createFileMetadata);
}
exports.toRedirectFilesMetadata = toRedirectFilesMetadata;
async function writeRedirectFile(file) {
    try {
        // User-friendly security to prevent file overrides
        if (await fs_extra_1.default.pathExists(file.fileAbsolutePath)) {
            throw new Error('The redirect plugin is not supposed to override existing files');
        }
        await fs_extra_1.default.ensureDir(path_1.default.dirname(file.fileAbsolutePath));
        await fs_extra_1.default.writeFile(file.fileAbsolutePath, file.fileContent, 
        // Hard security to prevent file overrides
        // See https://stackoverflow.com/a/34187712/82609
        { flag: 'wx' });
    }
    catch (err) {
        throw new Error(`Redirect file creation error for path=${file.fileAbsolutePath}: ${err}`);
    }
}
exports.writeRedirectFile = writeRedirectFile;
async function writeRedirectFiles(redirectFiles) {
    await Promise.all(redirectFiles.map(writeRedirectFile));
}
exports.default = writeRedirectFiles;
