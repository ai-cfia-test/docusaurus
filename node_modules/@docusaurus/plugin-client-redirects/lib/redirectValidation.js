"use strict";
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateRedirect = exports.PathnameValidator = void 0;
const Joi = __importStar(require("@hapi/joi"));
const utils_1 = require("@docusaurus/utils");
exports.PathnameValidator = Joi.string()
    .custom((val) => {
    if (!utils_1.isValidPathname(val)) {
        throw new Error();
    }
    else {
        return val;
    }
})
    .message('{{#label}} is not a valid pathname. Pathname should start with / and not contain any domain or query string');
const RedirectSchema = Joi.object({
    from: exports.PathnameValidator.required(),
    to: exports.PathnameValidator.required(),
});
function validateRedirect(redirect) {
    const { error } = RedirectSchema.validate(redirect, {
        abortEarly: true,
        convert: false,
    });
    if (error) {
        // Tells the user which redirect is the problem!
        throw new Error(`${JSON.stringify(redirect)} => Validation error: ${error.message}`);
    }
}
exports.validateRedirect = validateRedirect;
